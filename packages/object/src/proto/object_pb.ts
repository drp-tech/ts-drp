// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               unknown
// source: object/src/proto/object.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal.js";

export const protobufPackage = "topology.object";

export interface TopologyObject {
  id: string;
  abi: string;
  bytecode: string;
}

function createBaseTopologyObject(): TopologyObject {
  return { id: "", abi: "", bytecode: "" };
}

export const TopologyObject = {
  encode(message: TopologyObject, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.abi !== "") {
      writer.uint32(18).string(message.abi);
    }
    if (message.bytecode !== "") {
      writer.uint32(26).string(message.bytecode);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TopologyObject {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTopologyObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.abi = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.bytecode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TopologyObject {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      abi: isSet(object.abi) ? globalThis.String(object.abi) : "",
      bytecode: isSet(object.bytecode) ? globalThis.String(object.bytecode) : "",
    };
  },

  toJSON(message: TopologyObject): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.abi !== "") {
      obj.abi = message.abi;
    }
    if (message.bytecode !== "") {
      obj.bytecode = message.bytecode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TopologyObject>, I>>(base?: I): TopologyObject {
    return TopologyObject.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TopologyObject>, I>>(object: I): TopologyObject {
    const message = createBaseTopologyObject();
    message.id = object.id ?? "";
    message.abi = object.abi ?? "";
    message.bytecode = object.bytecode ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
