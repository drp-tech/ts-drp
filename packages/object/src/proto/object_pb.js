// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               unknown
// source: crdt/node_modules/@topology-foundation/object/src/proto/object.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Value } from "./struct_pb.js";
export const protobufPackage = "topology.object";
function createBaseVertex() {
    return { hash: "", nodeId: "", operation: undefined, dependencies: [] };
}
export const Vertex = {
    encode(message, writer = new BinaryWriter()) {
        if (message.hash !== "") {
            writer.uint32(10).string(message.hash);
        }
        if (message.nodeId !== "") {
            writer.uint32(18).string(message.nodeId);
        }
        if (message.operation !== undefined) {
            Vertex_Operation.encode(message.operation, writer.uint32(26).fork()).join();
        }
        for (const v of message.dependencies) {
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVertex();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.nodeId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.operation = Vertex_Operation.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.dependencies.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
            nodeId: isSet(object.nodeId) ? globalThis.String(object.nodeId) : "",
            operation: isSet(object.operation) ? Vertex_Operation.fromJSON(object.operation) : undefined,
            dependencies: globalThis.Array.isArray(object?.dependencies)
                ? object.dependencies.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.hash !== "") {
            obj.hash = message.hash;
        }
        if (message.nodeId !== "") {
            obj.nodeId = message.nodeId;
        }
        if (message.operation !== undefined) {
            obj.operation = Vertex_Operation.toJSON(message.operation);
        }
        if (message.dependencies?.length) {
            obj.dependencies = message.dependencies;
        }
        return obj;
    },
    create(base) {
        return Vertex.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVertex();
        message.hash = object.hash ?? "";
        message.nodeId = object.nodeId ?? "";
        message.operation = (object.operation !== undefined && object.operation !== null)
            ? Vertex_Operation.fromPartial(object.operation)
            : undefined;
        message.dependencies = object.dependencies?.map((e) => e) || [];
        return message;
    },
};
function createBaseVertex_Operation() {
    return { type: "", value: undefined };
}
export const Vertex_Operation = {
    encode(message, writer = new BinaryWriter()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.value !== undefined) {
            Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVertex_Operation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            value: isSet(object?.value) ? object.value : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return Vertex_Operation.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVertex_Operation();
        message.type = object.type ?? "";
        message.value = object.value ?? undefined;
        return message;
    },
};
function createBaseTopologyObjectBase() {
    return { id: "", abi: undefined, bytecode: undefined, vertices: [] };
}
export const TopologyObjectBase = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.abi !== undefined) {
            writer.uint32(18).string(message.abi);
        }
        if (message.bytecode !== undefined) {
            writer.uint32(26).bytes(message.bytecode);
        }
        for (const v of message.vertices) {
            Vertex.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTopologyObjectBase();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.abi = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.bytecode = reader.bytes();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.vertices.push(Vertex.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            abi: isSet(object.abi) ? globalThis.String(object.abi) : undefined,
            bytecode: isSet(object.bytecode) ? bytesFromBase64(object.bytecode) : undefined,
            vertices: globalThis.Array.isArray(object?.vertices) ? object.vertices.map((e) => Vertex.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.abi !== undefined) {
            obj.abi = message.abi;
        }
        if (message.bytecode !== undefined) {
            obj.bytecode = base64FromBytes(message.bytecode);
        }
        if (message.vertices?.length) {
            obj.vertices = message.vertices.map((e) => Vertex.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return TopologyObjectBase.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTopologyObjectBase();
        message.id = object.id ?? "";
        message.abi = object.abi ?? undefined;
        message.bytecode = object.bytecode ?? undefined;
        message.vertices = object.vertices?.map((e) => Vertex.fromPartial(e)) || [];
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
