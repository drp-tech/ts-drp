// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               unknown
// source: network/src/proto/messages.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Value } from "./struct_pb.js";
export const protobufPackage = "topology.network";
export var Message_MessageType;
(function (Message_MessageType) {
    Message_MessageType[Message_MessageType["UPDATE"] = 0] = "UPDATE";
    Message_MessageType[Message_MessageType["SYNC"] = 1] = "SYNC";
    Message_MessageType[Message_MessageType["SYNC_ACCEPT"] = 2] = "SYNC_ACCEPT";
    Message_MessageType[Message_MessageType["SYNC_REJECT"] = 3] = "SYNC_REJECT";
    Message_MessageType[Message_MessageType["CUSTOM"] = 4] = "CUSTOM";
    Message_MessageType[Message_MessageType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Message_MessageType || (Message_MessageType = {}));
export function message_MessageTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "UPDATE":
            return Message_MessageType.UPDATE;
        case 1:
        case "SYNC":
            return Message_MessageType.SYNC;
        case 2:
        case "SYNC_ACCEPT":
            return Message_MessageType.SYNC_ACCEPT;
        case 3:
        case "SYNC_REJECT":
            return Message_MessageType.SYNC_REJECT;
        case 4:
        case "CUSTOM":
            return Message_MessageType.CUSTOM;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Message_MessageType.UNRECOGNIZED;
    }
}
export function message_MessageTypeToJSON(object) {
    switch (object) {
        case Message_MessageType.UPDATE:
            return "UPDATE";
        case Message_MessageType.SYNC:
            return "SYNC";
        case Message_MessageType.SYNC_ACCEPT:
            return "SYNC_ACCEPT";
        case Message_MessageType.SYNC_REJECT:
            return "SYNC_REJECT";
        case Message_MessageType.CUSTOM:
            return "CUSTOM";
        case Message_MessageType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseVertex() {
    return { hash: "", nodeId: "", operation: undefined, dependencies: [] };
}
export const Vertex = {
    encode(message, writer = new BinaryWriter()) {
        if (message.hash !== "") {
            writer.uint32(10).string(message.hash);
        }
        if (message.nodeId !== "") {
            writer.uint32(18).string(message.nodeId);
        }
        if (message.operation !== undefined) {
            Vertex_Operation.encode(message.operation, writer.uint32(26).fork()).join();
        }
        for (const v of message.dependencies) {
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVertex();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.nodeId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.operation = Vertex_Operation.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.dependencies.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
            nodeId: isSet(object.nodeId) ? globalThis.String(object.nodeId) : "",
            operation: isSet(object.operation) ? Vertex_Operation.fromJSON(object.operation) : undefined,
            dependencies: globalThis.Array.isArray(object?.dependencies)
                ? object.dependencies.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.hash !== "") {
            obj.hash = message.hash;
        }
        if (message.nodeId !== "") {
            obj.nodeId = message.nodeId;
        }
        if (message.operation !== undefined) {
            obj.operation = Vertex_Operation.toJSON(message.operation);
        }
        if (message.dependencies?.length) {
            obj.dependencies = message.dependencies;
        }
        return obj;
    },
    create(base) {
        return Vertex.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVertex();
        message.hash = object.hash ?? "";
        message.nodeId = object.nodeId ?? "";
        message.operation = (object.operation !== undefined && object.operation !== null)
            ? Vertex_Operation.fromPartial(object.operation)
            : undefined;
        message.dependencies = object.dependencies?.map((e) => e) || [];
        return message;
    },
};
function createBaseVertex_Operation() {
    return { type: "", value: undefined };
}
export const Vertex_Operation = {
    encode(message, writer = new BinaryWriter()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.value !== undefined) {
            Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVertex_Operation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            value: isSet(object?.value) ? object.value : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return Vertex_Operation.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVertex_Operation();
        message.type = object.type ?? "";
        message.value = object.value ?? undefined;
        return message;
    },
};
function createBaseMessage() {
    return { sender: "", type: 0, data: new Uint8Array(0) };
}
export const Message = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.type !== 0) {
            writer.uint32(16).int32(message.type);
        }
        if (message.data.length !== 0) {
            writer.uint32(26).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            type: isSet(object.type) ? message_MessageTypeFromJSON(object.type) : 0,
            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.type !== 0) {
            obj.type = message_MessageTypeToJSON(message.type);
        }
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        return obj;
    },
    create(base) {
        return Message.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMessage();
        message.sender = object.sender ?? "";
        message.type = object.type ?? 0;
        message.data = object.data ?? new Uint8Array(0);
        return message;
    },
};
function createBaseUpdate() {
    return { objectId: "", vertices: [] };
}
export const Update = {
    encode(message, writer = new BinaryWriter()) {
        if (message.objectId !== "") {
            writer.uint32(10).string(message.objectId);
        }
        for (const v of message.vertices) {
            Vertex.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.objectId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.vertices.push(Vertex.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            objectId: isSet(object.objectId) ? globalThis.String(object.objectId) : "",
            vertices: globalThis.Array.isArray(object?.vertices) ? object.vertices.map((e) => Vertex.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.objectId !== "") {
            obj.objectId = message.objectId;
        }
        if (message.vertices?.length) {
            obj.vertices = message.vertices.map((e) => Vertex.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return Update.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdate();
        message.objectId = object.objectId ?? "";
        message.vertices = object.vertices?.map((e) => Vertex.fromPartial(e)) || [];
        return message;
    },
};
function createBaseSync() {
    return { objectId: "", vertexHashes: [] };
}
export const Sync = {
    encode(message, writer = new BinaryWriter()) {
        if (message.objectId !== "") {
            writer.uint32(10).string(message.objectId);
        }
        for (const v of message.vertexHashes) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSync();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.objectId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.vertexHashes.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            objectId: isSet(object.objectId) ? globalThis.String(object.objectId) : "",
            vertexHashes: globalThis.Array.isArray(object?.vertexHashes)
                ? object.vertexHashes.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.objectId !== "") {
            obj.objectId = message.objectId;
        }
        if (message.vertexHashes?.length) {
            obj.vertexHashes = message.vertexHashes;
        }
        return obj;
    },
    create(base) {
        return Sync.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSync();
        message.objectId = object.objectId ?? "";
        message.vertexHashes = object.vertexHashes?.map((e) => e) || [];
        return message;
    },
};
function createBaseSyncAccept() {
    return { objectId: "", requested: [], requesting: [] };
}
export const SyncAccept = {
    encode(message, writer = new BinaryWriter()) {
        if (message.objectId !== "") {
            writer.uint32(10).string(message.objectId);
        }
        for (const v of message.requested) {
            Vertex.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.requesting) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSyncAccept();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.objectId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.requested.push(Vertex.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.requesting.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            objectId: isSet(object.objectId) ? globalThis.String(object.objectId) : "",
            requested: globalThis.Array.isArray(object?.requested)
                ? object.requested.map((e) => Vertex.fromJSON(e))
                : [],
            requesting: globalThis.Array.isArray(object?.requesting)
                ? object.requesting.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.objectId !== "") {
            obj.objectId = message.objectId;
        }
        if (message.requested?.length) {
            obj.requested = message.requested.map((e) => Vertex.toJSON(e));
        }
        if (message.requesting?.length) {
            obj.requesting = message.requesting;
        }
        return obj;
    },
    create(base) {
        return SyncAccept.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSyncAccept();
        message.objectId = object.objectId ?? "";
        message.requested = object.requested?.map((e) => Vertex.fromPartial(e)) || [];
        message.requesting = object.requesting?.map((e) => e) || [];
        return message;
    },
};
function createBaseSyncReject() {
    return {};
}
export const SyncReject = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSyncReject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return SyncReject.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseSyncReject();
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
