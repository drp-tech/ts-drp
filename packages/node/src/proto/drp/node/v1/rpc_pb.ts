// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               unknown
// source: node/src/proto/rpc.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "topology.node";

export interface SubscribeDRPRequest {
	drpId: string;
}

export interface SubscribeDRPResponse {
	/** can return error codes if different than 0 */
	returnCode: number;
}

export interface UnsubscribeDRPRequest {
	drpId: string;
}

export interface UnsubscribeDRPResponse {
	/** can return error codes if different than 0 */
	returnCode: number;
}

export interface GetDRPHashGraphRequest {
	drpId: string;
}

export interface GetDRPHashGraphResponse {
	/** linearized vertices hashes */
	verticesHashes: string[];
}

function createBaseSubscribeDRPRequest(): SubscribeDRPRequest {
	return { drpId: "" };
}

export const SubscribeDRPRequest = {
	encode(message: SubscribeDRPRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.drpId !== "") {
			writer.uint32(10).string(message.drpId);
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): SubscribeDRPRequest {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseSubscribeDRPRequest();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1:
					if (tag !== 10) {
						break;
					}

					message.drpId = reader.string();
					continue;
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): SubscribeDRPRequest {
		return { drpId: isSet(object.drpId) ? globalThis.String(object.drpId) : "" };
	},

	toJSON(message: SubscribeDRPRequest): unknown {
		const obj: any = {};
		if (message.drpId !== "") {
			obj.drpId = message.drpId;
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<SubscribeDRPRequest>, I>>(base?: I): SubscribeDRPRequest {
		return SubscribeDRPRequest.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<SubscribeDRPRequest>, I>>(object: I): SubscribeDRPRequest {
		const message = createBaseSubscribeDRPRequest();
		message.drpId = object.drpId ?? "";
		return message;
	},
};

function createBaseSubscribeDRPResponse(): SubscribeDRPResponse {
	return { returnCode: 0 };
}

export const SubscribeDRPResponse = {
	encode(message: SubscribeDRPResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.returnCode !== 0) {
			writer.uint32(8).int32(message.returnCode);
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): SubscribeDRPResponse {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseSubscribeDRPResponse();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1:
					if (tag !== 8) {
						break;
					}

					message.returnCode = reader.int32();
					continue;
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): SubscribeDRPResponse {
		return { returnCode: isSet(object.returnCode) ? globalThis.Number(object.returnCode) : 0 };
	},

	toJSON(message: SubscribeDRPResponse): unknown {
		const obj: any = {};
		if (message.returnCode !== 0) {
			obj.returnCode = Math.round(message.returnCode);
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<SubscribeDRPResponse>, I>>(base?: I): SubscribeDRPResponse {
		return SubscribeDRPResponse.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<SubscribeDRPResponse>, I>>(object: I): SubscribeDRPResponse {
		const message = createBaseSubscribeDRPResponse();
		message.returnCode = object.returnCode ?? 0;
		return message;
	},
};

function createBaseUnsubscribeDRPRequest(): UnsubscribeDRPRequest {
	return { drpId: "" };
}

export const UnsubscribeDRPRequest = {
	encode(message: UnsubscribeDRPRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.drpId !== "") {
			writer.uint32(10).string(message.drpId);
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): UnsubscribeDRPRequest {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseUnsubscribeDRPRequest();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1:
					if (tag !== 10) {
						break;
					}

					message.drpId = reader.string();
					continue;
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): UnsubscribeDRPRequest {
		return { drpId: isSet(object.drpId) ? globalThis.String(object.drpId) : "" };
	},

	toJSON(message: UnsubscribeDRPRequest): unknown {
		const obj: any = {};
		if (message.drpId !== "") {
			obj.drpId = message.drpId;
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<UnsubscribeDRPRequest>, I>>(base?: I): UnsubscribeDRPRequest {
		return UnsubscribeDRPRequest.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<UnsubscribeDRPRequest>, I>>(object: I): UnsubscribeDRPRequest {
		const message = createBaseUnsubscribeDRPRequest();
		message.drpId = object.drpId ?? "";
		return message;
	},
};

function createBaseUnsubscribeDRPResponse(): UnsubscribeDRPResponse {
	return { returnCode: 0 };
}

export const UnsubscribeDRPResponse = {
	encode(message: UnsubscribeDRPResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.returnCode !== 0) {
			writer.uint32(8).int32(message.returnCode);
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): UnsubscribeDRPResponse {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseUnsubscribeDRPResponse();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1:
					if (tag !== 8) {
						break;
					}

					message.returnCode = reader.int32();
					continue;
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): UnsubscribeDRPResponse {
		return { returnCode: isSet(object.returnCode) ? globalThis.Number(object.returnCode) : 0 };
	},

	toJSON(message: UnsubscribeDRPResponse): unknown {
		const obj: any = {};
		if (message.returnCode !== 0) {
			obj.returnCode = Math.round(message.returnCode);
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<UnsubscribeDRPResponse>, I>>(base?: I): UnsubscribeDRPResponse {
		return UnsubscribeDRPResponse.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<UnsubscribeDRPResponse>, I>>(object: I): UnsubscribeDRPResponse {
		const message = createBaseUnsubscribeDRPResponse();
		message.returnCode = object.returnCode ?? 0;
		return message;
	},
};

function createBaseGetDRPHashGraphRequest(): GetDRPHashGraphRequest {
	return { drpId: "" };
}

export const GetDRPHashGraphRequest = {
	encode(message: GetDRPHashGraphRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.drpId !== "") {
			writer.uint32(10).string(message.drpId);
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): GetDRPHashGraphRequest {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseGetDRPHashGraphRequest();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1:
					if (tag !== 10) {
						break;
					}

					message.drpId = reader.string();
					continue;
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): GetDRPHashGraphRequest {
		return { drpId: isSet(object.drpId) ? globalThis.String(object.drpId) : "" };
	},

	toJSON(message: GetDRPHashGraphRequest): unknown {
		const obj: any = {};
		if (message.drpId !== "") {
			obj.drpId = message.drpId;
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<GetDRPHashGraphRequest>, I>>(base?: I): GetDRPHashGraphRequest {
		return GetDRPHashGraphRequest.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<GetDRPHashGraphRequest>, I>>(object: I): GetDRPHashGraphRequest {
		const message = createBaseGetDRPHashGraphRequest();
		message.drpId = object.drpId ?? "";
		return message;
	},
};

function createBaseGetDRPHashGraphResponse(): GetDRPHashGraphResponse {
	return { verticesHashes: [] };
}

export const GetDRPHashGraphResponse = {
	encode(message: GetDRPHashGraphResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		for (const v of message.verticesHashes) {
			writer.uint32(10).string(v!);
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): GetDRPHashGraphResponse {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseGetDRPHashGraphResponse();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1:
					if (tag !== 10) {
						break;
					}

					message.verticesHashes.push(reader.string());
					continue;
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): GetDRPHashGraphResponse {
		return {
			verticesHashes: globalThis.Array.isArray(object?.verticesHashes)
				? object.verticesHashes.map((e: any) => globalThis.String(e))
				: [],
		};
	},

	toJSON(message: GetDRPHashGraphResponse): unknown {
		const obj: any = {};
		if (message.verticesHashes?.length) {
			obj.verticesHashes = message.verticesHashes;
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<GetDRPHashGraphResponse>, I>>(base?: I): GetDRPHashGraphResponse {
		return GetDRPHashGraphResponse.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<GetDRPHashGraphResponse>, I>>(object: I): GetDRPHashGraphResponse {
		const message = createBaseGetDRPHashGraphResponse();
		message.verticesHashes = object.verticesHashes?.map((e) => e) || [];
		return message;
	},
};

export interface TopologyRpc {
	subscribeDRP(request: SubscribeDRPRequest): Promise<SubscribeDRPResponse>;
	unsubscribeDRP(request: UnsubscribeDRPRequest): Promise<UnsubscribeDRPResponse>;
	getDRPHashGraph(request: GetDRPHashGraphRequest): Promise<GetDRPHashGraphResponse>;
}

export const TopologyRpcServiceName = "topology.node.TopologyRpc";
export class TopologyRpcClientImpl implements TopologyRpc {
	private readonly rpc: Rpc;
	private readonly service: string;
	constructor(rpc: Rpc, opts?: { service?: string }) {
		this.service = opts?.service || TopologyRpcServiceName;
		this.rpc = rpc;
		this.subscribeDRP = this.subscribeDRP.bind(this);
		this.unsubscribeDRP = this.unsubscribeDRP.bind(this);
		this.getDRPHashGraph = this.getDRPHashGraph.bind(this);
	}
	subscribeDRP(request: SubscribeDRPRequest): Promise<SubscribeDRPResponse> {
		const data = SubscribeDRPRequest.encode(request).finish();
		const promise = this.rpc.request(this.service, "subscribeDRP", data);
		return promise.then((data) => SubscribeDRPResponse.decode(new BinaryReader(data)));
	}

	unsubscribeDRP(request: UnsubscribeDRPRequest): Promise<UnsubscribeDRPResponse> {
		const data = UnsubscribeDRPRequest.encode(request).finish();
		const promise = this.rpc.request(this.service, "unsubscribeDRP", data);
		return promise.then((data) => UnsubscribeDRPResponse.decode(new BinaryReader(data)));
	}

	getDRPHashGraph(request: GetDRPHashGraphRequest): Promise<GetDRPHashGraphResponse> {
		const data = GetDRPHashGraphRequest.encode(request).finish();
		const promise = this.rpc.request(this.service, "getDRPHashGraph", data);
		return promise.then((data) => GetDRPHashGraphResponse.decode(new BinaryReader(data)));
	}
}

interface Rpc {
	request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
	: T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
	: T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
	: T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
	: Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
	: P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
	return value !== null && value !== undefined;
}
