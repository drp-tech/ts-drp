// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: node/src/proto/rpc.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "topology.rpc";

export interface SubscribeCroRequest {
  croId: string;
}

export interface SubscribeCroResponse {
  /** can return error codes if different than 0 */
  returnCode: number;
}

export interface UnsubscribeCroRequest {
  croId: string;
}

export interface UnsubscribeCroResponse {
  /** can return error codes if different than 0 */
  returnCode: number;
}

export interface GetCroHashGraphRequest {
  croId: string;
}

export interface GetCroHashGraphResponse {
  /** linearized vertices hashes */
  verticesHashes: string[];
}

function createBaseSubscribeCroRequest(): SubscribeCroRequest {
  return { croId: "" };
}

export const SubscribeCroRequest: MessageFns<SubscribeCroRequest> = {
  encode(message: SubscribeCroRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.croId !== "") {
      writer.uint32(10).string(message.croId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscribeCroRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeCroRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.croId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeCroRequest {
    return { croId: isSet(object.croId) ? globalThis.String(object.croId) : "" };
  },

  toJSON(message: SubscribeCroRequest): unknown {
    const obj: any = {};
    if (message.croId !== "") {
      obj.croId = message.croId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribeCroRequest>, I>>(base?: I): SubscribeCroRequest {
    return SubscribeCroRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribeCroRequest>, I>>(object: I): SubscribeCroRequest {
    const message = createBaseSubscribeCroRequest();
    message.croId = object.croId ?? "";
    return message;
  },
};

function createBaseSubscribeCroResponse(): SubscribeCroResponse {
  return { returnCode: 0 };
}

export const SubscribeCroResponse: MessageFns<SubscribeCroResponse> = {
  encode(message: SubscribeCroResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.returnCode !== 0) {
      writer.uint32(8).int32(message.returnCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscribeCroResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeCroResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.returnCode = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeCroResponse {
    return { returnCode: isSet(object.returnCode) ? globalThis.Number(object.returnCode) : 0 };
  },

  toJSON(message: SubscribeCroResponse): unknown {
    const obj: any = {};
    if (message.returnCode !== 0) {
      obj.returnCode = Math.round(message.returnCode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribeCroResponse>, I>>(base?: I): SubscribeCroResponse {
    return SubscribeCroResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribeCroResponse>, I>>(object: I): SubscribeCroResponse {
    const message = createBaseSubscribeCroResponse();
    message.returnCode = object.returnCode ?? 0;
    return message;
  },
};

function createBaseUnsubscribeCroRequest(): UnsubscribeCroRequest {
  return { croId: "" };
}

export const UnsubscribeCroRequest: MessageFns<UnsubscribeCroRequest> = {
  encode(message: UnsubscribeCroRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.croId !== "") {
      writer.uint32(10).string(message.croId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnsubscribeCroRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnsubscribeCroRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.croId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnsubscribeCroRequest {
    return { croId: isSet(object.croId) ? globalThis.String(object.croId) : "" };
  },

  toJSON(message: UnsubscribeCroRequest): unknown {
    const obj: any = {};
    if (message.croId !== "") {
      obj.croId = message.croId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnsubscribeCroRequest>, I>>(base?: I): UnsubscribeCroRequest {
    return UnsubscribeCroRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnsubscribeCroRequest>, I>>(object: I): UnsubscribeCroRequest {
    const message = createBaseUnsubscribeCroRequest();
    message.croId = object.croId ?? "";
    return message;
  },
};

function createBaseUnsubscribeCroResponse(): UnsubscribeCroResponse {
  return { returnCode: 0 };
}

export const UnsubscribeCroResponse: MessageFns<UnsubscribeCroResponse> = {
  encode(message: UnsubscribeCroResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.returnCode !== 0) {
      writer.uint32(8).int32(message.returnCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnsubscribeCroResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnsubscribeCroResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.returnCode = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnsubscribeCroResponse {
    return { returnCode: isSet(object.returnCode) ? globalThis.Number(object.returnCode) : 0 };
  },

  toJSON(message: UnsubscribeCroResponse): unknown {
    const obj: any = {};
    if (message.returnCode !== 0) {
      obj.returnCode = Math.round(message.returnCode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnsubscribeCroResponse>, I>>(base?: I): UnsubscribeCroResponse {
    return UnsubscribeCroResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnsubscribeCroResponse>, I>>(object: I): UnsubscribeCroResponse {
    const message = createBaseUnsubscribeCroResponse();
    message.returnCode = object.returnCode ?? 0;
    return message;
  },
};

function createBaseGetCroHashGraphRequest(): GetCroHashGraphRequest {
  return { croId: "" };
}

export const GetCroHashGraphRequest: MessageFns<GetCroHashGraphRequest> = {
  encode(message: GetCroHashGraphRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.croId !== "") {
      writer.uint32(10).string(message.croId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCroHashGraphRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCroHashGraphRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.croId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCroHashGraphRequest {
    return { croId: isSet(object.croId) ? globalThis.String(object.croId) : "" };
  },

  toJSON(message: GetCroHashGraphRequest): unknown {
    const obj: any = {};
    if (message.croId !== "") {
      obj.croId = message.croId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCroHashGraphRequest>, I>>(base?: I): GetCroHashGraphRequest {
    return GetCroHashGraphRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCroHashGraphRequest>, I>>(object: I): GetCroHashGraphRequest {
    const message = createBaseGetCroHashGraphRequest();
    message.croId = object.croId ?? "";
    return message;
  },
};

function createBaseGetCroHashGraphResponse(): GetCroHashGraphResponse {
  return { verticesHashes: [] };
}

export const GetCroHashGraphResponse: MessageFns<GetCroHashGraphResponse> = {
  encode(message: GetCroHashGraphResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.verticesHashes) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCroHashGraphResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCroHashGraphResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.verticesHashes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCroHashGraphResponse {
    return {
      verticesHashes: globalThis.Array.isArray(object?.verticesHashes)
        ? object.verticesHashes.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GetCroHashGraphResponse): unknown {
    const obj: any = {};
    if (message.verticesHashes?.length) {
      obj.verticesHashes = message.verticesHashes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCroHashGraphResponse>, I>>(base?: I): GetCroHashGraphResponse {
    return GetCroHashGraphResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCroHashGraphResponse>, I>>(object: I): GetCroHashGraphResponse {
    const message = createBaseGetCroHashGraphResponse();
    message.verticesHashes = object.verticesHashes?.map((e) => e) || [];
    return message;
  },
};

export interface Rpc {
  subscribeCro(request: SubscribeCroRequest): Promise<SubscribeCroResponse>;
  unsubscribeCro(request: UnsubscribeCroRequest): Promise<UnsubscribeCroRequest>;
  getCroHashGraph(request: GetCroHashGraphRequest): Promise<GetCroHashGraphResponse>;
}

export const RpcServiceName = "topology.rpc.Rpc";
export class RpcClientImpl implements Rpc {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || RpcServiceName;
    this.rpc = rpc;
    this.subscribeCro = this.subscribeCro.bind(this);
    this.unsubscribeCro = this.unsubscribeCro.bind(this);
    this.getCroHashGraph = this.getCroHashGraph.bind(this);
  }
  subscribeCro(request: SubscribeCroRequest): Promise<SubscribeCroResponse> {
    const data = SubscribeCroRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "subscribeCro", data);
    return promise.then((data) => SubscribeCroResponse.decode(new BinaryReader(data)));
  }

  unsubscribeCro(request: UnsubscribeCroRequest): Promise<UnsubscribeCroRequest> {
    const data = UnsubscribeCroRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "unsubscribeCro", data);
    return promise.then((data) => UnsubscribeCroRequest.decode(new BinaryReader(data)));
  }

  getCroHashGraph(request: GetCroHashGraphRequest): Promise<GetCroHashGraphResponse> {
    const data = GetCroHashGraphRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "getCroHashGraph", data);
    return promise.then((data) => GetCroHashGraphResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
